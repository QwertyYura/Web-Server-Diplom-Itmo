package ru.lb.impl.server;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import ru.lb.impl.server.ssl.SSLClientHello;
import ru.lb.impl.server.ssl.SSLUtils;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

class SSLPackTest {
private ByteBuffer buffer;
    @BeforeEach
    void setUp() {
        buffer = ByteBuffer.allocate(1024);
        buffer =  buffer.put(new byte[]{22, 3, 1, 2, 0, 1, 0, 1, -4, 3, 3, -61, -22, -62, -124, 77, -49, -99, 3, 84, -87, 13, 27, 23, -13, -104, -72, -20, 66, 106, -121, 84, 98, 10, 27, -45, 71, 35, 112, 94, 23, 1, 24, 32, 29, 7, -55, 77, -102, 105, 6, 9, 93, 6, 19, 46, 69, 56, -48, -120, 116, -74, 32, -89, -5, 93, 103, -126, 85, -100, -65, 47, -115, -92, -91, -67, 0, 36, 19, 1, 19, 3, 19, 2, -64, 43, -64, 47, -52, -87, -52, -88, -64, 44, -64, 48, -64, 10, -64, 9, -64, 19, -64, 20, 0, 51, 0, 57, 0, 47, 0, 53, 0, 10, 1, 0, 1, -113, 0, 0, 0, 13, 0, 11, 0, 0, 8, 102, 97, 115, 105, 101, 46, 114, 117, 0, 23, 0, 0, -1, 1, 0, 1, 0, 0, 10, 0, 14, 0, 12, 0, 29, 0, 23, 0, 24, 0, 25, 1, 0, 1, 1, 0, 11, 0, 2, 1, 0, 0, 35, 0, 0, 0, 16, 0, 14, 0, 12, 2, 104, 50, 8, 104, 116, 116, 112, 47, 49, 46, 49, 0, 5, 0, 5, 1, 0, 0, 0, 0, 0, 51, 0, 107, 0, 105, 0, 29, 0, 32, -77, 48, 92, -48, 79, 74, 24, 47, -14, 63, -90, -38, -52, 111, 33, 52, -40, -54, -118, 123, 125, 39, 16, 55, 2, -33, 82, -55, 46, -43, 91, 17, 0, 23, 0, 65, 4, -118, 21, -62, -119, -118, -5, 96, 65, -84, 58, -81, -93, 57, 76, -112, 56, -96, 50, -67, -97, 49, 76, -7, 48, 61, -45, -17, 60, -39, -46, 36, 55, 6, 7, 35, 82, 60, 36, 87, 86, -60, -49, -62, 50, -83, 97, -69, 106, -2, -89, 56, -112, -107, -59, 37, 13, -64, 112, -93, -117, 42, 121, -36, -61, 0, 43, 0, 9, 8, 3, 4, 3, 3, 3, 2, 3, 1, 0, 13, 0, 24, 0, 22, 4, 3, 5, 3, 6, 3, 8, 4, 8, 5, 8, 6, 4, 1, 5, 1, 6, 1, 2, 3, 2, 1, 0, 45, 0, 2, 1, 1, 0, 28, 0, 2, 64, 1, 0, 21, 0, -106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0});
    }

    @Test
    void readSSLReq(){
        buffer.limit(buffer.capacity());
    //   SSLClientHello pack = new SSLClientHello(buffer);
    }


    @AfterEach
    void tearDown() {

    }
}